package my:host;

interface test-types {

  record foo {
    x: string,
  }

  record baz {
    x: string,
    c: foo,
    d: tuple<s32, f32>,
    e: option<s32>,
    f: list<foo>,
    gbruh: list<props>,
    g: descriptor-type,
    h: props,
    // g: result<foo, descriptor-type>,
    i: result<foo>,
    j: voodoo,
    k: list<bar>,
  }

  flags props {
    cool,
    lame,
    so-lame,
  }

  record bar {
    a: s32,
    b: f32,
    c: char,
    d: bool,
  }

  variant voodoo {
    un-possesed,
    possesed(string),
  }

  enum descriptor-type {
    unknown,
    block-device,
    character-device,
    directory,
    fifo,
    symbolic-link,
    regular-file,
    socket,
  }
}

interface test-interface {
  test-no-params: func();
  test-simple-params: func(a: s8, b: s16, c: s32, d: s64, e: u8, f: u16, g: u32, h: u64, i: f32, j: f64, k: bool, l: char);
  test-simple-params-ptr: func(a: s8, b: s16, c: s32, d: s64, e: u8, f: u16, g: u32, h: u64, i: f32, j: f64, k: bool, l: char, m: s32, n: s32, o: s32, p: s32, q: s32);
  add-callback: func(env: string, name: string) -> u32;
  test-simple-return: func(x: s32) -> s32;
  test-simple-return2: func(x: s8) -> s8;

  resource blob {
    constructor(init: list<u8>);
    write: func(bytes: list<u8>);
    read: func(n: s32) -> list<u8>;
    merge: static func(lhs: blob, rhs: blob) -> blob;
    print: static func(lhs: borrow<blob>, rhs: borrow<blob>);
  }
}

interface callback-types {
  // record callback {
  //   data: u32,
  //   key: u32,
  //   drop: u32,
  // }

  resource callback {
    constructor(data: u32, key: u32, drop: u32);
    data: func() -> u32;
    key: func() -> u32;
  }
}

//interface callbacks-impl {
//  use callback-types.{callback};
//  dealloc-callback: func(data: u32);
//}
