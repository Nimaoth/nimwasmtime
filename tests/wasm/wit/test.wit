package my:test-package;

interface test-types {

  record foo {
    x: string,
  }

  record baz {
    x: string,
    c: foo,
    d: tuple<s32, f32>,
    e: option<s32>,
    f: list<foo>,
    gbruh: list<props>,
    g: descriptor-type,
    h: props,
    // g: result<foo, descriptor-type>,
    i: result<foo>,
    j: voodoo
  }

  flags props {
    cool,
    lame,
    so-lame,
  }

  record bar {
    a: s32,
    b: f32,
    c: char,
    d: bool,
  }

  variant voodoo {
    un-possesed,
    possesed(string),
  }

  enum descriptor-type {
    unknown,
    block-device,
    character-device,
    directory,
    fifo,
    symbolic-link,
    regular-file,
    socket,
  }
}

world plugin1 {
  use test-types.{bar, baz};

  import env: interface {
    use test-types.{bar, baz};
    test-no-params2: func();
  }

  import my:host/test-interface;
  export my:plugin1/api;

  export start: func();
}
