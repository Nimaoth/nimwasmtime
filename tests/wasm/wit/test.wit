package my:test-package;

interface test-types {

  record foo {
    x: string,
  }

  record baz {
    x: string,
    c: foo,
    d: tuple<s32, f32>,
    e: option<s32>,
    f: list<foo>,
    gbruh: list<props>,
    g: descriptor-type,
    h: props,
    // g: result<foo, descriptor-type>,
    i: result<foo>,
    j: voodoo
  }

  flags props {
    cool,
    lame,
    so-lame,
  }

  record bar {
    a: s32,
    b: f32,
    c: char,
    d: bool,
  }

  variant voodoo {
    un-possesed,
    possesed(string),
  }

  enum descriptor-type {
    unknown,
    block-device,
    character-device,
    directory,
    fifo,
    symbolic-link,
    regular-file,
    socket,
  }
}

interface test-interface {
  test-no-params: func();
  test-simple-params: func(a: s8, b: s16, c: s32, d: s64, e: u8, f: u16, g: u32, h: u64, i: f32, j: f64, k: bool, l: char);
  test-simple-params-ptr: func(a: s8, b: s16, c: s32, d: s64, e: u8, f: u16, g: u32, h: u64, i: f32, j: f64, k: bool, l: char, m: s32, n: s32, o: s32, p: s32, q: s32);

  resource blob {
    constructor(init: list<u8>);
    write: func(bytes: list<u8>);
    read: func(n: s32) -> list<u8>;
    merge: static func(lhs: blob, rhs: blob) -> blob;
    print: static func(lhs: borrow<blob>, rhs: borrow<blob>);
  }
}

// interface plugin1 {
//   foo: func();
// }

world test-world {
  use test-types.{bar, baz};

  import env: interface {
    use test-types.{bar, baz};
    test-no-params2: func();
    // bar-baz: func(a: s32, b: f32) -> f32;
    // call-bar: func(f: bar) -> bar;
    // call-baz: func(b: baz) -> baz;
    // call-baz: func(b: baz) -> s32;

  }

  import test-interface;
  // export plugin1;
  export my:plugin1/plugin1-api;

  export start: func();
  // export foo: func(f: bar) -> f32;
  // export bar: func(f: bar) -> bar;
  // export baz: func(f: baz) -> baz;
  // export barz: func(f: bar, g: baz) -> baz;
}
