package my:demo;

interface types {
  record foo {
    x: string,
  }

  record baz {
    x: string,
    c: foo,
    d: option<string>,
    e: option<voodoo>,
    f: list<s32>,
    // g: result<foo, descriptor-type>,
    // h: result<bar>,
  }

  record bar {
    a: s32,
    b: f32,
  }

  variant voodoo {
    unpossesed,
    possesed(string),
  }

  enum descriptor-type {
    unknown,
    block-device,
    character-device,
    directory,
    fifo,
    symbolic-link,
    regular-file,
    socket,
  }
}

world test-world {
  use types.{bar};

  import env: interface {
    use types.{bar, baz};
    bar-baz: func(a: s32, b: f32) -> f32;
    call-bar: func(f: bar);
    call-baz: func(b: baz);
  }

  export hello: func();
  export foo: func(f: bar) -> f32;
}
